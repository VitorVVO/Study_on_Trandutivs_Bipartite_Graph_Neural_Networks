#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from igraph import Graph
import os
import json
import numpy

if __name__ == '__main__':

    max_itr_alg = 1
    layers = 2
    schema = [[0, 1]]
    # ub_set = [0.1, 0.5, 1.0]
    ub_set = [0.5]
    # percentage_set = [80]
    percentage_set = [50]
    #datasets = ['Dmoz_Computers', 'Dmoz_Health', 'Dmoz_Science', 'Dmoz_Sports']
    datasets = ['Industry_Sector', 'NSF']
    keyphrases = ['keyphrase2','keyphrase3','keyphrase23']
    n_rotulateds =  [1,5,10,20,30]

    for dataset in datasets:

        input_directory = "/home/vitor_vasconcelos/workdir/mestrado_v2/real_networks/"+dataset+"/networks/"

        clpk_input_directory = "/home/vitor_vasconcelos/workdir/mestrado_v2/real_networks/"+dataset+"/clpk_input/"
        clpk_output_directory = "/home/vitor_vasconcelos/workdir/mestrado_v2/real_networks/"+dataset+"/clpk_output/"

        if not os.path.exists(input_directory):
            os.makedirs(input_directory)
        if not os.path.exists(clpk_input_directory):
            os.makedirs(clpk_input_directory)
        if not os.path.exists(clpk_output_directory):
            os.makedirs(clpk_output_directory)

        networks = []
        for keyphrase in keyphrases:
            for n_rotulated in n_rotulateds:
                for itr in range(10):
                    networks.append(dataset + '_' + keyphrase + '_' + str(n_rotulated).replace('.', '') + '_' + str(itr))

        for key, network in enumerate(networks):

            for percentage in percentage_set:

                for itr_alg in range(max_itr_alg):

                    for ub in ub_set:

                        with open(input_directory + network + '.json') as json_file:
                            jfile = json.load(json_file)
                            vertices = jfile['vertices']

                        communities = [int(vertices[0] * (100 - percentage) / 100), int(vertices[1] * (100 - percentage) / 100)]

                        # print(str(key) + ', ' + network + ', ' + str(vertices[0]) + ', ' + str(vertices[1]) + ', ' + str(percentage) + ', ' + str(ub) + ', ' + str(itr_alg))

                        #clpk_input_filename = clpk_output_filename = network + '_' + keyphrase + '_' + str(n_rotulated).replace('.', '') + '_' + str(itr)
                        clpk_input_filename = clpk_output_filename = network

                        print(network)

                        _dict = {
                            "vertices": vertices,
                            "reduction_factor": [
                                None
                            ],
                            "max_levels": [
                                None
                            ],
                            "max_size": communities,
                            "matching": "single-label",
                            "seed_priority": "random",
                            "upper_bound": [ub, ub],
                            "threshold": 0.3, # 0.3
                            "max_prop_label": 7,
                            "itr": 20,
                            "until_convergence": False,
                            "reverse": True,
                            "output_directory": clpk_output_directory,
                            "output": clpk_output_filename,
                            "input": input_directory + network + ".ncol",
                            "type_filename": None,
                            "file_labels_true": None,
                            "save_conf": True,
                            "save_ncol": True,
                            "save_type": False,
                            "save_membership": False,
                            "save_predecessor": False,
                            "save_successor": False,
                            "save_weight": False,
                            "save_source": True,
                            "save_timing_csv": False,
                            "save_timing_json": True,
                            "unique_key": False,
                            "show_timing": False,
                            "show_conf": False,
                            "metrics": [],
                            "schema": schema,
                            "save_metrics_csv": False,
                            "save_metrics_json": False,
                            "show_metrics": False
                        }


                        dict_file = clpk_input_directory + clpk_input_filename + ".json"

                        with open(dict_file, "w+") as f:
                            json.dump(_dict, f, indent=4)

                        os.system('python ../mcdkn/mcdkn.py -cnf ' + dict_file)


# "metrics": [#'nmi', 
# # 'ars' ,
# # 'murata_modularity' ,
# 'barber_modularity', 
# #'one_mode_modularity', 
# #'one_mode_conductance' ],